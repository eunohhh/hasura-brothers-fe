/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "\n  mutation SaveRefreshToken($object: user_tokens_insert_input!) {\n    insert_user_tokens_one(object: $object) {\n      id\n    }\n  }\n": typeof types.SaveRefreshTokenDocument,
    "\n  mutation UpdateTokenLastUsedById($tokenId: uuid!) {\n    update_user_tokens_by_pk(\n      pk_columns: { id: $tokenId }\n      _set: { last_used_at: \"now()\", updated_at: \"now()\" }\n    ) {\n      id\n    }\n  }\n": typeof types.UpdateTokenLastUsedByIdDocument,
    "\n  mutation RevokeRefreshToken($tokenId: uuid!) {\n    update_user_tokens_by_pk(\n      pk_columns: { id: $tokenId }\n      _set: { expired_at: \"now()\" }\n    ) {\n      id\n      expired_at\n    }\n  }\n": typeof types.RevokeRefreshTokenDocument,
    "\n  mutation RevokeRefreshTokenAll($userId: uuid!) {\n    update_user_tokens(\n      where: { user_id: { _eq: $userId } }\n      _set: { expired_at: \"now()\" }\n    ) {\n      affected_rows\n    }\n  }\n": typeof types.RevokeRefreshTokenAllDocument,
    "\n  mutation DeleteAllUserTokens($userId: uuid!) {\n    delete_user_tokens(where: { user_id: { _eq: $userId } }) {\n      affected_rows\n    }\n  }\n": typeof types.DeleteAllUserTokensDocument,
    "\n  mutation RegisterUser(\n    $id: uuid!\n    $email: String\n    $name: String\n    $profile_image: String\n    $provider: String\n    $provider_id: String\n    $accept_marketing: Boolean\n  ) {\n    insert_user_one(\n      object: {\n        id: $id\n        email: $email\n        name: $name\n        profile_image: $profile_image\n        provider: $provider\n        provider_id: $provider_id\n        accept_marketing: $accept_marketing\n      }\n    ) {\n      id\n      email\n      name\n      profile_image\n      is_admin\n      created_at\n    }\n  }\n": typeof types.RegisterUserDocument,
    "\n  mutation UpdateUserByProvider(\n    $provider: String!\n    $provider_id: String!\n    $email: String\n    $name: String\n    $profile_image: String\n  ) {\n    update_user(\n      where: { provider: { _eq: $provider }, provider_id: { _eq: $provider_id } }\n      _set: { email: $email, name: $name, profile_image: $profile_image, updated_at: \"now()\" }\n    ) {\n      affected_rows\n      returning {\n        id\n        email\n        name\n        profile_image\n        is_admin\n        created_at\n      }\n    }\n  }\n": typeof types.UpdateUserByProviderDocument,
    "\n  mutation UploadInvitationImage(\n    $id: uuid!\n    $invitation_id: uuid!\n    $widget_id: uuid\n    $type: String!\n    $mime_type: String!\n    $bucket: String!\n    $key: String!\n    $width: Int\n    $height: Int\n    $user_id: uuid\n  ) {\n    insert_invitation_attachment_one(\n      object: {\n        id: $id\n        invitation_id: $invitation_id\n        widget_id: $widget_id\n        type: $type\n        mime_type: $mime_type\n        bucket: $bucket\n        key: $key\n        width: $width\n        height: $height\n        user_id: $user_id\n      }\n    ) {\n      id\n      invitation_id\n      widget_id\n      type\n      bucket\n      key\n      width\n      height\n      created_at\n    }\n  }\n": typeof types.UploadInvitationImageDocument,
    "\n  mutation AdminCreateTemplate(\n    $id: uuid!\n    $invitation_id: uuid!\n    $order: Int!\n  ) {\n    insert_template_one(\n      object: { id: $id, invitation_id: $invitation_id, order: $order }\n    ) {\n      id\n      invitation_id\n      order\n      created_at\n    }\n  }\n": typeof types.AdminCreateTemplateDocument,
    "\n  mutation AdminUpdateUserRole($userId: uuid!, $isAdmin: Boolean!) {\n    update_user_by_pk(pk_columns: { id: $userId }, _set: { is_admin: $isAdmin }) {\n      id\n      email\n      name\n      is_admin\n      updated_at\n    }\n  }\n": typeof types.AdminUpdateUserRoleDocument,
    "\n  mutation AdminUpdateTemplateStage($id: uuid!, $order: Int!) {\n    update_template_by_pk(pk_columns: { id: $id }, _set: { order: $order }) {\n      id\n      order\n      updated_at\n    }\n  }\n": typeof types.AdminUpdateTemplateStageDocument,
    "\n  mutation AdminUpdateTemplateTitle($invitationId: uuid!, $metaTitle: String!) {\n    update_invitation_by_pk(\n      pk_columns: { id: $invitationId }\n    ) {\n      id\n      updated_at\n    }\n  }\n": typeof types.AdminUpdateTemplateTitleDocument,
    "\n  mutation AdminDeleteTemplate($id: uuid!) {\n    delete_template_by_pk(id: $id) {\n      id\n    }\n  }\n": typeof types.AdminDeleteTemplateDocument,
    "\n  mutation AdminUpdateTemplateOrders($updates: [template_insert_input!]!) {\n    insert_template(\n      objects: $updates\n      on_conflict: { constraint: template_pkey, update_columns: [order] }\n    ) {\n      affected_rows\n    }\n  }\n": typeof types.AdminUpdateTemplateOrdersDocument,
    "\n  mutation UpdateWidgetConfig($id: uuid!, $config: jsonb!) {\n    update_widget_by_pk(pk_columns: { id: $id }, _set: { config: $config }) {\n      id\n      config\n      updated_at\n    }\n  }\n": typeof types.UpdateWidgetConfigDocument,
    "\n  mutation UpdateWidgetIndex($id: uuid!, $index: Int!) {\n    update_widget_by_pk(pk_columns: { id: $id }, _set: { index: $index }) {\n      id\n      index\n      updated_at\n    }\n  }\n": typeof types.UpdateWidgetIndexDocument,
    "\n  mutation DeleteWidget($id: uuid!) {\n    delete_widget_by_pk(id: $id) {\n      id\n    }\n  }\n": typeof types.DeleteWidgetDocument,
    "\n  mutation AddWidget(\n    $id: uuid!\n    $invitation_id: uuid!\n    $type: String!\n    $index: Int!\n    $config: jsonb\n  ) {\n    insert_widget_one(\n      object: {\n        id: $id\n        invitation_id: $invitation_id\n        type: $type\n        index: $index\n        config: $config\n      }\n    ) {\n      id\n      invitation_id\n      type\n      index\n      config\n      created_at\n    }\n  }\n": typeof types.AddWidgetDocument,
    "\n  mutation SubmitRsvpAnswer(\n    $id: uuid!\n    $invitation_id: uuid!\n    $user_tracking_id: String!\n    $accepted: Boolean!\n    $form_values: jsonb\n  ) {\n    insert_invitation_rsvp_answer_one(\n      object: {\n        id: $id\n        invitation_id: $invitation_id\n        user_tracking_id: $user_tracking_id\n        accepted: $accepted\n        form_values: $form_values\n      }\n      on_conflict: {\n        constraint: invitation_rsvp_answer_invitation_user_idx\n        update_columns: [accepted, form_values, updated_at]\n      }\n    ) {\n      id\n      invitation_id\n      user_tracking_id\n      accepted\n      form_values\n      created_at\n      updated_at\n    }\n  }\n": typeof types.SubmitRsvpAnswerDocument,
    "\n  mutation CreateComment(\n    $id: uuid!\n    $invitation_id: uuid!\n    $parent_id: uuid\n    $author: String!\n    $author_profile_image: String\n    $body: String!\n    $password: String\n  ) {\n    insert_invitation_comment_one(\n      object: {\n        id: $id\n        invitation_id: $invitation_id\n        parent_id: $parent_id\n        author: $author\n        author_profile_image: $author_profile_image\n        body: $body\n        password: $password\n      }\n    ) {\n      id\n      invitation_id\n      parent_id\n      author\n      author_profile_image\n      body\n      created_at\n    }\n  }\n": typeof types.CreateCommentDocument,
    "\n  mutation UpdateComment($id: uuid!, $body: String!, $password: String!) {\n    update_invitation_comment_by_pk(\n      pk_columns: { id: $id }\n      _set: { body: $body, updated_at: \"now()\" }\n    ) {\n      id\n      body\n      updated_at\n    }\n  }\n": typeof types.UpdateCommentDocument,
    "\n  mutation DeleteComment($id: uuid!, $password: String!) {\n    update_invitation_comment_by_pk(\n      pk_columns: { id: $id }\n      _set: { removed_at: \"now()\" }\n    ) {\n      id\n      removed_at\n    }\n  }\n": typeof types.DeleteCommentDocument,
    "\n  mutation CreateInvitation(\n    $id: uuid!\n    $user_id: uuid!\n    $share_key: String!\n    $layout_type: String\n    $brand_color: String\n    $font: String\n  ) {\n    insert_invitation_one(\n      object: {\n        id: $id\n        layout_type: $layout_type\n        brand_color: $brand_color\n        font: $font\n        invitation_editors: { data: { id: $user_id, user_id: $user_id, is_creator: true } }\n        invitation_shares: {\n          data: { id: $user_id, share_key: $share_key, activation_method: \"public\" }\n        }\n      }\n    ) {\n      id\n      layout_type\n      brand_color\n      font\n      created_at\n    }\n  }\n": typeof types.CreateInvitationDocument,
    "\n  mutation UpdateInvitationEventInfo(\n    $id: uuid!\n    $event_at: timestamptz\n    $full_day_schedule: Boolean\n    $address: String\n    $road_address: String\n    $place_name: String\n    $place_detail: String\n    $coord: String\n  ) {\n    update_invitation_by_pk(\n      pk_columns: { id: $id }\n      _set: {\n        event_at: $event_at\n        full_day_schedule: $full_day_schedule\n        address: $address\n        road_address: $road_address\n        place_name: $place_name\n        place_detail: $place_detail\n        coord: $coord\n      }\n    ) {\n      id\n      event_at\n      full_day_schedule\n      address\n      road_address\n      place_name\n      place_detail\n      coord\n      updated_at\n    }\n  }\n": typeof types.UpdateInvitationEventInfoDocument,
    "\n  mutation UpdateInvitationOwners(\n    $invitation_id: uuid!\n    $owners: [invitation_owner_insert_input!]!\n  ) {\n    delete_invitation_owner(where: { invitation_id: { _eq: $invitation_id } }) {\n      affected_rows\n    }\n    insert_invitation_owner(objects: $owners) {\n      returning {\n        id\n        invitation_id\n        name\n        role\n        level\n        index\n      }\n    }\n  }\n": typeof types.UpdateInvitationOwnersDocument,
    "\n  mutation UpdateInvitationMeta(\n    $id: uuid!\n  ) {\n    update_invitation_by_pk(\n      pk_columns: { id: $id }\n      _set: {\n      }\n    ) {\n      id\n      updated_at\n    }\n  }\n": typeof types.UpdateInvitationMetaDocument,
    "\n  mutation UpdateInvitationDesign(\n    $id: uuid!\n    $layout_type: String\n    $brand_color: String\n    $font: String\n  ) {\n    update_invitation_by_pk(\n      pk_columns: { id: $id }\n      _set: { layout_type: $layout_type, brand_color: $brand_color, font: $font }\n    ) {\n      id\n      layout_type\n      brand_color\n      font\n      updated_at\n    }\n  }\n": typeof types.UpdateInvitationDesignDocument,
    "\n  mutation DeleteInvitation($id: uuid!) {\n    update_invitation_by_pk(pk_columns: { id: $id }, _set: { removed_at: \"now()\" }) {\n      id\n      removed_at\n    }\n  }\n": typeof types.DeleteInvitationDocument,
    "\n  mutation SetInvitationVisibility($invitation_id: uuid!, $visible: Boolean!) {\n    update_invitation_share(\n      where: { invitation_id: { _eq: $invitation_id } }\n      _set: { visible: $visible }\n    ) {\n      affected_rows\n    }\n  }\n": typeof types.SetInvitationVisibilityDocument,
    "\n  mutation LogInvitationVisit(\n    $invitation_id: uuid!\n    $user_tracking_id: String!\n  ) {\n    insert_invitation_visit_log_one(\n      object: {\n        invitation_id: $invitation_id\n        user_tracking_id: $user_tracking_id\n      }\n    ) {\n      invitation_id\n      visit_at\n    }\n  }\n": typeof types.LogInvitationVisitDocument,
    "\n  mutation ConfirmOrder(\n    $order_id: uuid!\n    $status: String!\n    $payment_key: String!\n  ) {\n    update_order_by_pk(\n      pk_columns: { id: $order_id }\n      _set: { status: $status, payment_key: $payment_key }\n    ) {\n      id\n      status\n      payment_key\n      updated_at\n    }\n  }\n": typeof types.ConfirmOrderDocument,
    "\n  mutation ConfirmFreeOrder($order_id: uuid!, $status: String!) {\n    update_order_by_pk(pk_columns: { id: $order_id }, _set: { status: $status }) {\n      id\n      status\n      updated_at\n    }\n  }\n": typeof types.ConfirmFreeOrderDocument,
    "\n  query GetRefreshTokenByPk($id: uuid!) {\n    user_tokens_by_pk(id: $id) {\n      id\n      refresh_token\n      user_id\n      provider\n      expired_at\n      user {\n        id\n        email\n        name\n      }\n    }\n  }\n": typeof types.GetRefreshTokenByPkDocument,
    "\n  query GetUserByEmail($email: String!) {\n    user(where: { email: { _eq: $email } }) {\n      id\n      email\n      name\n    }\n  }\n": typeof types.GetUserByEmailDocument,
    "\n  query GetMyInfo {\n    user {\n      id\n      email\n      name\n      profile_image\n      provider\n      provider_id\n      accept_marketing\n      is_admin\n      created_at\n      updated_at\n    }\n  }\n": typeof types.GetMyInfoDocument,
    "\n  query GetAllTemplates($limit: Int, $offset: Int) {\n    template(limit: $limit, offset: $offset, order_by: { order: asc }) {\n      id\n      invitation_id\n      order\n      created_at\n      updated_at\n      invitation {\n        id\n        layout_type\n        brand_color\n        font\n      }\n    }\n  }\n": typeof types.GetAllTemplatesDocument,
    "\n  query GetImageInfo($id: uuid!) {\n    invitation_attachment_by_pk(id: $id) {\n      id\n      invitation_id\n      widget_id\n      type\n      mime_type\n      bucket\n      key\n      width\n      height\n      user_id\n      created_at\n    }\n  }\n": typeof types.GetImageInfoDocument,
    "\n  query AdminGetTemplates($limit: Int, $offset: Int) {\n    template(limit: $limit, offset: $offset, order_by: { order: asc }) {\n      id\n      invitation_id\n      order\n      created_at\n      updated_at\n      invitation {\n        id\n        layout_type\n        brand_color\n        font\n        event_at\n        place_name\n      }\n    }\n  }\n": typeof types.AdminGetTemplatesDocument,
    "\n  query AdminGetAllInvitations($limit: Int, $offset: Int) {\n    invitation(\n      limit: $limit\n      offset: $offset\n      order_by: { created_at: desc }\n      where: { removed_at: { _is_null: true } }\n    ) {\n      id\n      event_at\n      full_day_schedule\n      address\n      road_address\n      place_name\n      place_detail\n      coord\n      layout_type\n      brand_color\n      font\n      created_at\n      updated_at\n      invitation_owners {\n        name\n        role\n      }\n      invitation_editors {\n        user {\n          name\n          email\n        }\n        is_creator\n      }\n    }\n  }\n": typeof types.AdminGetAllInvitationsDocument,
    "\n  query AdminGetInvitation($id: uuid!) {\n    invitation_by_pk(id: $id) {\n      id\n      event_at\n      full_day_schedule\n      address\n      road_address\n      place_name\n      place_detail\n      coord\n      layout_type\n      brand_color\n      font\n      created_at\n      updated_at\n      invitation_owners {\n        id\n        name\n        role\n        level\n        index\n        given_name\n        family_name\n        family_name_first\n      }\n      invitation_editors {\n        id\n        user_id\n        is_creator\n        last_edit_at\n        user {\n          name\n          email\n        }\n      }\n      widgets {\n        id\n        type\n        index\n        config\n      }\n    }\n  }\n": typeof types.AdminGetInvitationDocument,
    "\n  query AdminSearchUsers($search: String!, $limit: Int) {\n    user(\n      where: {\n        _or: [\n          { email: { _ilike: $search } }\n          { name: { _ilike: $search } }\n        ]\n        removed_at: { _is_null: true }\n      }\n      limit: $limit\n    ) {\n      id\n      email\n      name\n      profile_image\n      is_admin\n      created_at\n    }\n  }\n": typeof types.AdminSearchUsersDocument,
    "\n  query AdminGetMe {\n    user(where: { is_admin: { _eq: true } }, limit: 1) {\n      id\n      email\n      name\n      profile_image\n      is_admin\n      created_at\n    }\n  }\n": typeof types.AdminGetMeDocument,
    "\n  query AdminGetStatistics {\n    invitation_aggregate {\n      aggregate {\n        count\n      }\n    }\n    user_aggregate(where: { removed_at: { _is_null: true } }) {\n      aggregate {\n        count\n      }\n    }\n    order_aggregate(where: { status: { _eq: \"COMPLETED\" } }) {\n      aggregate {\n        count\n      }\n    }\n    invitation_visit_log_aggregate {\n      aggregate {\n        count\n      }\n    }\n  }\n": typeof types.AdminGetStatisticsDocument,
    "\n  query GetInvitation($id: uuid!) {\n    invitation_by_pk(id: $id) {\n      id\n      event_at\n      full_day_schedule\n      address\n      road_address\n      place_name\n      place_detail\n      coord\n      layout_type\n      brand_color\n      font\n      created_at\n      updated_at\n      invitation_owners(order_by: { index: asc }) {\n        id\n        name\n        role\n        level\n        index\n        given_name\n        family_name\n        family_name_first\n        father_given_name\n        father_family_name\n        father_family_name_first\n        father_is_hidden\n        father_is_deceased\n        mother_given_name\n        mother_family_name\n        mother_family_name_first\n        mother_is_hidden\n        mother_is_deceased\n      }\n      widgets(order_by: { index: asc }) {\n        id\n        type\n        index\n        config\n        created_at\n        updated_at\n      }\n      invitation_shares(where: { visible: { _eq: true } }) {\n        id\n        share_key\n        activation_method\n        expired_at\n        visible\n      }\n    }\n  }\n": typeof types.GetInvitationDocument,
    "\n  query GetMyInvitations($userId: uuid!) {\n    invitation_editor(\n      where: { user_id: { _eq: $userId } }\n      order_by: { created_at: desc }\n    ) {\n      invitation {\n        id\n        event_at\n        place_name\n        layout_type\n        brand_color\n        created_at\n        updated_at\n        invitation_owners(limit: 2) {\n          name\n          role\n        }\n        invitation_shares(where: { visible: { _eq: true } }, limit: 1) {\n          share_key\n        }\n      }\n      is_creator\n      last_edit_at\n    }\n  }\n": typeof types.GetMyInvitationsDocument,
    "\n  query GetInvitationOrder($invitationId: uuid!) {\n    order(\n      where: { invitation_id: { _eq: $invitationId } }\n      order_by: { created_at: desc }\n      limit: 1\n    ) {\n      id\n      invitation_id\n      status\n      plan\n      payment_key\n      created_at\n      updated_at\n    }\n  }\n": typeof types.GetInvitationOrderDocument,
    "\n  query GetInvitationByShareKey($shareKey: String!) {\n    invitation_share(where: { share_key: { _eq: $shareKey } }) {\n      id\n      share_key\n      visible\n      expired_at\n      invitation {\n        id\n        event_at\n        full_day_schedule\n        address\n        road_address\n        place_name\n        place_detail\n        coord\n        layout_type\n        brand_color\n        font\n        invitation_owners(order_by: { index: asc }) {\n          id\n          name\n          role\n          level\n          given_name\n          family_name\n          family_name_first\n          father_given_name\n          father_family_name\n          father_is_hidden\n          father_is_deceased\n          mother_given_name\n          mother_family_name\n          mother_is_hidden\n          mother_is_deceased\n        }\n        widgets(order_by: { index: asc }) {\n          id\n          type\n          index\n          config\n        }\n      }\n    }\n  }\n": typeof types.GetInvitationByShareKeyDocument,
    "\n  query GetInvitationVisitCount($invitationId: uuid!) {\n    invitation_visit_log_aggregate(\n      where: { invitation_id: { _eq: $invitationId } }\n    ) {\n      aggregate {\n        count\n      }\n    }\n  }\n": typeof types.GetInvitationVisitCountDocument,
    "\n  query GetAllRsvpAnswers($invitationId: uuid!) {\n    invitation_rsvp_answer(\n      where: { invitation_id: { _eq: $invitationId } }\n      order_by: { created_at: desc }\n    ) {\n      id\n      invitation_id\n      user_tracking_id\n      accepted\n      form_values\n      created_at\n      updated_at\n    }\n  }\n": typeof types.GetAllRsvpAnswersDocument,
    "\n  query GetMyRsvpAnswer($invitationId: uuid!, $userTrackingId: String!) {\n    invitation_rsvp_answer(\n      where: {\n        invitation_id: { _eq: $invitationId }\n        user_tracking_id: { _eq: $userTrackingId }\n      }\n    ) {\n      id\n      invitation_id\n      user_tracking_id\n      accepted\n      form_values\n      created_at\n      updated_at\n    }\n  }\n": typeof types.GetMyRsvpAnswerDocument,
    "\n  query GetRsvpAnswerCount($invitationId: uuid!) {\n    invitation_rsvp_answer_aggregate(\n      where: { invitation_id: { _eq: $invitationId } }\n    ) {\n      aggregate {\n        count\n      }\n    }\n  }\n": typeof types.GetRsvpAnswerCountDocument,
    "\n  query GetInvitationComments($invitationId: uuid!, $limit: Int, $offset: Int) {\n    invitation_comment(\n      where: {\n        invitation_id: { _eq: $invitationId }\n        removed_at: { _is_null: true }\n        parent_id: { _is_null: true }\n      }\n      order_by: { created_at: desc }\n      limit: $limit\n      offset: $offset\n    ) {\n      id\n      invitation_id\n      parent_id\n      author\n      author_profile_image\n      body\n      created_at\n      updated_at\n      replies: invitation_comments(\n        where: { removed_at: { _is_null: true } }\n      ) {\n        id\n        parent_id\n        author\n        author_profile_image\n        body\n        created_at\n        updated_at\n      }\n    }\n  }\n": typeof types.GetInvitationCommentsDocument,
};
const documents: Documents = {
    "\n  mutation SaveRefreshToken($object: user_tokens_insert_input!) {\n    insert_user_tokens_one(object: $object) {\n      id\n    }\n  }\n": types.SaveRefreshTokenDocument,
    "\n  mutation UpdateTokenLastUsedById($tokenId: uuid!) {\n    update_user_tokens_by_pk(\n      pk_columns: { id: $tokenId }\n      _set: { last_used_at: \"now()\", updated_at: \"now()\" }\n    ) {\n      id\n    }\n  }\n": types.UpdateTokenLastUsedByIdDocument,
    "\n  mutation RevokeRefreshToken($tokenId: uuid!) {\n    update_user_tokens_by_pk(\n      pk_columns: { id: $tokenId }\n      _set: { expired_at: \"now()\" }\n    ) {\n      id\n      expired_at\n    }\n  }\n": types.RevokeRefreshTokenDocument,
    "\n  mutation RevokeRefreshTokenAll($userId: uuid!) {\n    update_user_tokens(\n      where: { user_id: { _eq: $userId } }\n      _set: { expired_at: \"now()\" }\n    ) {\n      affected_rows\n    }\n  }\n": types.RevokeRefreshTokenAllDocument,
    "\n  mutation DeleteAllUserTokens($userId: uuid!) {\n    delete_user_tokens(where: { user_id: { _eq: $userId } }) {\n      affected_rows\n    }\n  }\n": types.DeleteAllUserTokensDocument,
    "\n  mutation RegisterUser(\n    $id: uuid!\n    $email: String\n    $name: String\n    $profile_image: String\n    $provider: String\n    $provider_id: String\n    $accept_marketing: Boolean\n  ) {\n    insert_user_one(\n      object: {\n        id: $id\n        email: $email\n        name: $name\n        profile_image: $profile_image\n        provider: $provider\n        provider_id: $provider_id\n        accept_marketing: $accept_marketing\n      }\n    ) {\n      id\n      email\n      name\n      profile_image\n      is_admin\n      created_at\n    }\n  }\n": types.RegisterUserDocument,
    "\n  mutation UpdateUserByProvider(\n    $provider: String!\n    $provider_id: String!\n    $email: String\n    $name: String\n    $profile_image: String\n  ) {\n    update_user(\n      where: { provider: { _eq: $provider }, provider_id: { _eq: $provider_id } }\n      _set: { email: $email, name: $name, profile_image: $profile_image, updated_at: \"now()\" }\n    ) {\n      affected_rows\n      returning {\n        id\n        email\n        name\n        profile_image\n        is_admin\n        created_at\n      }\n    }\n  }\n": types.UpdateUserByProviderDocument,
    "\n  mutation UploadInvitationImage(\n    $id: uuid!\n    $invitation_id: uuid!\n    $widget_id: uuid\n    $type: String!\n    $mime_type: String!\n    $bucket: String!\n    $key: String!\n    $width: Int\n    $height: Int\n    $user_id: uuid\n  ) {\n    insert_invitation_attachment_one(\n      object: {\n        id: $id\n        invitation_id: $invitation_id\n        widget_id: $widget_id\n        type: $type\n        mime_type: $mime_type\n        bucket: $bucket\n        key: $key\n        width: $width\n        height: $height\n        user_id: $user_id\n      }\n    ) {\n      id\n      invitation_id\n      widget_id\n      type\n      bucket\n      key\n      width\n      height\n      created_at\n    }\n  }\n": types.UploadInvitationImageDocument,
    "\n  mutation AdminCreateTemplate(\n    $id: uuid!\n    $invitation_id: uuid!\n    $order: Int!\n  ) {\n    insert_template_one(\n      object: { id: $id, invitation_id: $invitation_id, order: $order }\n    ) {\n      id\n      invitation_id\n      order\n      created_at\n    }\n  }\n": types.AdminCreateTemplateDocument,
    "\n  mutation AdminUpdateUserRole($userId: uuid!, $isAdmin: Boolean!) {\n    update_user_by_pk(pk_columns: { id: $userId }, _set: { is_admin: $isAdmin }) {\n      id\n      email\n      name\n      is_admin\n      updated_at\n    }\n  }\n": types.AdminUpdateUserRoleDocument,
    "\n  mutation AdminUpdateTemplateStage($id: uuid!, $order: Int!) {\n    update_template_by_pk(pk_columns: { id: $id }, _set: { order: $order }) {\n      id\n      order\n      updated_at\n    }\n  }\n": types.AdminUpdateTemplateStageDocument,
    "\n  mutation AdminUpdateTemplateTitle($invitationId: uuid!, $metaTitle: String!) {\n    update_invitation_by_pk(\n      pk_columns: { id: $invitationId }\n    ) {\n      id\n      updated_at\n    }\n  }\n": types.AdminUpdateTemplateTitleDocument,
    "\n  mutation AdminDeleteTemplate($id: uuid!) {\n    delete_template_by_pk(id: $id) {\n      id\n    }\n  }\n": types.AdminDeleteTemplateDocument,
    "\n  mutation AdminUpdateTemplateOrders($updates: [template_insert_input!]!) {\n    insert_template(\n      objects: $updates\n      on_conflict: { constraint: template_pkey, update_columns: [order] }\n    ) {\n      affected_rows\n    }\n  }\n": types.AdminUpdateTemplateOrdersDocument,
    "\n  mutation UpdateWidgetConfig($id: uuid!, $config: jsonb!) {\n    update_widget_by_pk(pk_columns: { id: $id }, _set: { config: $config }) {\n      id\n      config\n      updated_at\n    }\n  }\n": types.UpdateWidgetConfigDocument,
    "\n  mutation UpdateWidgetIndex($id: uuid!, $index: Int!) {\n    update_widget_by_pk(pk_columns: { id: $id }, _set: { index: $index }) {\n      id\n      index\n      updated_at\n    }\n  }\n": types.UpdateWidgetIndexDocument,
    "\n  mutation DeleteWidget($id: uuid!) {\n    delete_widget_by_pk(id: $id) {\n      id\n    }\n  }\n": types.DeleteWidgetDocument,
    "\n  mutation AddWidget(\n    $id: uuid!\n    $invitation_id: uuid!\n    $type: String!\n    $index: Int!\n    $config: jsonb\n  ) {\n    insert_widget_one(\n      object: {\n        id: $id\n        invitation_id: $invitation_id\n        type: $type\n        index: $index\n        config: $config\n      }\n    ) {\n      id\n      invitation_id\n      type\n      index\n      config\n      created_at\n    }\n  }\n": types.AddWidgetDocument,
    "\n  mutation SubmitRsvpAnswer(\n    $id: uuid!\n    $invitation_id: uuid!\n    $user_tracking_id: String!\n    $accepted: Boolean!\n    $form_values: jsonb\n  ) {\n    insert_invitation_rsvp_answer_one(\n      object: {\n        id: $id\n        invitation_id: $invitation_id\n        user_tracking_id: $user_tracking_id\n        accepted: $accepted\n        form_values: $form_values\n      }\n      on_conflict: {\n        constraint: invitation_rsvp_answer_invitation_user_idx\n        update_columns: [accepted, form_values, updated_at]\n      }\n    ) {\n      id\n      invitation_id\n      user_tracking_id\n      accepted\n      form_values\n      created_at\n      updated_at\n    }\n  }\n": types.SubmitRsvpAnswerDocument,
    "\n  mutation CreateComment(\n    $id: uuid!\n    $invitation_id: uuid!\n    $parent_id: uuid\n    $author: String!\n    $author_profile_image: String\n    $body: String!\n    $password: String\n  ) {\n    insert_invitation_comment_one(\n      object: {\n        id: $id\n        invitation_id: $invitation_id\n        parent_id: $parent_id\n        author: $author\n        author_profile_image: $author_profile_image\n        body: $body\n        password: $password\n      }\n    ) {\n      id\n      invitation_id\n      parent_id\n      author\n      author_profile_image\n      body\n      created_at\n    }\n  }\n": types.CreateCommentDocument,
    "\n  mutation UpdateComment($id: uuid!, $body: String!, $password: String!) {\n    update_invitation_comment_by_pk(\n      pk_columns: { id: $id }\n      _set: { body: $body, updated_at: \"now()\" }\n    ) {\n      id\n      body\n      updated_at\n    }\n  }\n": types.UpdateCommentDocument,
    "\n  mutation DeleteComment($id: uuid!, $password: String!) {\n    update_invitation_comment_by_pk(\n      pk_columns: { id: $id }\n      _set: { removed_at: \"now()\" }\n    ) {\n      id\n      removed_at\n    }\n  }\n": types.DeleteCommentDocument,
    "\n  mutation CreateInvitation(\n    $id: uuid!\n    $user_id: uuid!\n    $share_key: String!\n    $layout_type: String\n    $brand_color: String\n    $font: String\n  ) {\n    insert_invitation_one(\n      object: {\n        id: $id\n        layout_type: $layout_type\n        brand_color: $brand_color\n        font: $font\n        invitation_editors: { data: { id: $user_id, user_id: $user_id, is_creator: true } }\n        invitation_shares: {\n          data: { id: $user_id, share_key: $share_key, activation_method: \"public\" }\n        }\n      }\n    ) {\n      id\n      layout_type\n      brand_color\n      font\n      created_at\n    }\n  }\n": types.CreateInvitationDocument,
    "\n  mutation UpdateInvitationEventInfo(\n    $id: uuid!\n    $event_at: timestamptz\n    $full_day_schedule: Boolean\n    $address: String\n    $road_address: String\n    $place_name: String\n    $place_detail: String\n    $coord: String\n  ) {\n    update_invitation_by_pk(\n      pk_columns: { id: $id }\n      _set: {\n        event_at: $event_at\n        full_day_schedule: $full_day_schedule\n        address: $address\n        road_address: $road_address\n        place_name: $place_name\n        place_detail: $place_detail\n        coord: $coord\n      }\n    ) {\n      id\n      event_at\n      full_day_schedule\n      address\n      road_address\n      place_name\n      place_detail\n      coord\n      updated_at\n    }\n  }\n": types.UpdateInvitationEventInfoDocument,
    "\n  mutation UpdateInvitationOwners(\n    $invitation_id: uuid!\n    $owners: [invitation_owner_insert_input!]!\n  ) {\n    delete_invitation_owner(where: { invitation_id: { _eq: $invitation_id } }) {\n      affected_rows\n    }\n    insert_invitation_owner(objects: $owners) {\n      returning {\n        id\n        invitation_id\n        name\n        role\n        level\n        index\n      }\n    }\n  }\n": types.UpdateInvitationOwnersDocument,
    "\n  mutation UpdateInvitationMeta(\n    $id: uuid!\n  ) {\n    update_invitation_by_pk(\n      pk_columns: { id: $id }\n      _set: {\n      }\n    ) {\n      id\n      updated_at\n    }\n  }\n": types.UpdateInvitationMetaDocument,
    "\n  mutation UpdateInvitationDesign(\n    $id: uuid!\n    $layout_type: String\n    $brand_color: String\n    $font: String\n  ) {\n    update_invitation_by_pk(\n      pk_columns: { id: $id }\n      _set: { layout_type: $layout_type, brand_color: $brand_color, font: $font }\n    ) {\n      id\n      layout_type\n      brand_color\n      font\n      updated_at\n    }\n  }\n": types.UpdateInvitationDesignDocument,
    "\n  mutation DeleteInvitation($id: uuid!) {\n    update_invitation_by_pk(pk_columns: { id: $id }, _set: { removed_at: \"now()\" }) {\n      id\n      removed_at\n    }\n  }\n": types.DeleteInvitationDocument,
    "\n  mutation SetInvitationVisibility($invitation_id: uuid!, $visible: Boolean!) {\n    update_invitation_share(\n      where: { invitation_id: { _eq: $invitation_id } }\n      _set: { visible: $visible }\n    ) {\n      affected_rows\n    }\n  }\n": types.SetInvitationVisibilityDocument,
    "\n  mutation LogInvitationVisit(\n    $invitation_id: uuid!\n    $user_tracking_id: String!\n  ) {\n    insert_invitation_visit_log_one(\n      object: {\n        invitation_id: $invitation_id\n        user_tracking_id: $user_tracking_id\n      }\n    ) {\n      invitation_id\n      visit_at\n    }\n  }\n": types.LogInvitationVisitDocument,
    "\n  mutation ConfirmOrder(\n    $order_id: uuid!\n    $status: String!\n    $payment_key: String!\n  ) {\n    update_order_by_pk(\n      pk_columns: { id: $order_id }\n      _set: { status: $status, payment_key: $payment_key }\n    ) {\n      id\n      status\n      payment_key\n      updated_at\n    }\n  }\n": types.ConfirmOrderDocument,
    "\n  mutation ConfirmFreeOrder($order_id: uuid!, $status: String!) {\n    update_order_by_pk(pk_columns: { id: $order_id }, _set: { status: $status }) {\n      id\n      status\n      updated_at\n    }\n  }\n": types.ConfirmFreeOrderDocument,
    "\n  query GetRefreshTokenByPk($id: uuid!) {\n    user_tokens_by_pk(id: $id) {\n      id\n      refresh_token\n      user_id\n      provider\n      expired_at\n      user {\n        id\n        email\n        name\n      }\n    }\n  }\n": types.GetRefreshTokenByPkDocument,
    "\n  query GetUserByEmail($email: String!) {\n    user(where: { email: { _eq: $email } }) {\n      id\n      email\n      name\n    }\n  }\n": types.GetUserByEmailDocument,
    "\n  query GetMyInfo {\n    user {\n      id\n      email\n      name\n      profile_image\n      provider\n      provider_id\n      accept_marketing\n      is_admin\n      created_at\n      updated_at\n    }\n  }\n": types.GetMyInfoDocument,
    "\n  query GetAllTemplates($limit: Int, $offset: Int) {\n    template(limit: $limit, offset: $offset, order_by: { order: asc }) {\n      id\n      invitation_id\n      order\n      created_at\n      updated_at\n      invitation {\n        id\n        layout_type\n        brand_color\n        font\n      }\n    }\n  }\n": types.GetAllTemplatesDocument,
    "\n  query GetImageInfo($id: uuid!) {\n    invitation_attachment_by_pk(id: $id) {\n      id\n      invitation_id\n      widget_id\n      type\n      mime_type\n      bucket\n      key\n      width\n      height\n      user_id\n      created_at\n    }\n  }\n": types.GetImageInfoDocument,
    "\n  query AdminGetTemplates($limit: Int, $offset: Int) {\n    template(limit: $limit, offset: $offset, order_by: { order: asc }) {\n      id\n      invitation_id\n      order\n      created_at\n      updated_at\n      invitation {\n        id\n        layout_type\n        brand_color\n        font\n        event_at\n        place_name\n      }\n    }\n  }\n": types.AdminGetTemplatesDocument,
    "\n  query AdminGetAllInvitations($limit: Int, $offset: Int) {\n    invitation(\n      limit: $limit\n      offset: $offset\n      order_by: { created_at: desc }\n      where: { removed_at: { _is_null: true } }\n    ) {\n      id\n      event_at\n      full_day_schedule\n      address\n      road_address\n      place_name\n      place_detail\n      coord\n      layout_type\n      brand_color\n      font\n      created_at\n      updated_at\n      invitation_owners {\n        name\n        role\n      }\n      invitation_editors {\n        user {\n          name\n          email\n        }\n        is_creator\n      }\n    }\n  }\n": types.AdminGetAllInvitationsDocument,
    "\n  query AdminGetInvitation($id: uuid!) {\n    invitation_by_pk(id: $id) {\n      id\n      event_at\n      full_day_schedule\n      address\n      road_address\n      place_name\n      place_detail\n      coord\n      layout_type\n      brand_color\n      font\n      created_at\n      updated_at\n      invitation_owners {\n        id\n        name\n        role\n        level\n        index\n        given_name\n        family_name\n        family_name_first\n      }\n      invitation_editors {\n        id\n        user_id\n        is_creator\n        last_edit_at\n        user {\n          name\n          email\n        }\n      }\n      widgets {\n        id\n        type\n        index\n        config\n      }\n    }\n  }\n": types.AdminGetInvitationDocument,
    "\n  query AdminSearchUsers($search: String!, $limit: Int) {\n    user(\n      where: {\n        _or: [\n          { email: { _ilike: $search } }\n          { name: { _ilike: $search } }\n        ]\n        removed_at: { _is_null: true }\n      }\n      limit: $limit\n    ) {\n      id\n      email\n      name\n      profile_image\n      is_admin\n      created_at\n    }\n  }\n": types.AdminSearchUsersDocument,
    "\n  query AdminGetMe {\n    user(where: { is_admin: { _eq: true } }, limit: 1) {\n      id\n      email\n      name\n      profile_image\n      is_admin\n      created_at\n    }\n  }\n": types.AdminGetMeDocument,
    "\n  query AdminGetStatistics {\n    invitation_aggregate {\n      aggregate {\n        count\n      }\n    }\n    user_aggregate(where: { removed_at: { _is_null: true } }) {\n      aggregate {\n        count\n      }\n    }\n    order_aggregate(where: { status: { _eq: \"COMPLETED\" } }) {\n      aggregate {\n        count\n      }\n    }\n    invitation_visit_log_aggregate {\n      aggregate {\n        count\n      }\n    }\n  }\n": types.AdminGetStatisticsDocument,
    "\n  query GetInvitation($id: uuid!) {\n    invitation_by_pk(id: $id) {\n      id\n      event_at\n      full_day_schedule\n      address\n      road_address\n      place_name\n      place_detail\n      coord\n      layout_type\n      brand_color\n      font\n      created_at\n      updated_at\n      invitation_owners(order_by: { index: asc }) {\n        id\n        name\n        role\n        level\n        index\n        given_name\n        family_name\n        family_name_first\n        father_given_name\n        father_family_name\n        father_family_name_first\n        father_is_hidden\n        father_is_deceased\n        mother_given_name\n        mother_family_name\n        mother_family_name_first\n        mother_is_hidden\n        mother_is_deceased\n      }\n      widgets(order_by: { index: asc }) {\n        id\n        type\n        index\n        config\n        created_at\n        updated_at\n      }\n      invitation_shares(where: { visible: { _eq: true } }) {\n        id\n        share_key\n        activation_method\n        expired_at\n        visible\n      }\n    }\n  }\n": types.GetInvitationDocument,
    "\n  query GetMyInvitations($userId: uuid!) {\n    invitation_editor(\n      where: { user_id: { _eq: $userId } }\n      order_by: { created_at: desc }\n    ) {\n      invitation {\n        id\n        event_at\n        place_name\n        layout_type\n        brand_color\n        created_at\n        updated_at\n        invitation_owners(limit: 2) {\n          name\n          role\n        }\n        invitation_shares(where: { visible: { _eq: true } }, limit: 1) {\n          share_key\n        }\n      }\n      is_creator\n      last_edit_at\n    }\n  }\n": types.GetMyInvitationsDocument,
    "\n  query GetInvitationOrder($invitationId: uuid!) {\n    order(\n      where: { invitation_id: { _eq: $invitationId } }\n      order_by: { created_at: desc }\n      limit: 1\n    ) {\n      id\n      invitation_id\n      status\n      plan\n      payment_key\n      created_at\n      updated_at\n    }\n  }\n": types.GetInvitationOrderDocument,
    "\n  query GetInvitationByShareKey($shareKey: String!) {\n    invitation_share(where: { share_key: { _eq: $shareKey } }) {\n      id\n      share_key\n      visible\n      expired_at\n      invitation {\n        id\n        event_at\n        full_day_schedule\n        address\n        road_address\n        place_name\n        place_detail\n        coord\n        layout_type\n        brand_color\n        font\n        invitation_owners(order_by: { index: asc }) {\n          id\n          name\n          role\n          level\n          given_name\n          family_name\n          family_name_first\n          father_given_name\n          father_family_name\n          father_is_hidden\n          father_is_deceased\n          mother_given_name\n          mother_family_name\n          mother_is_hidden\n          mother_is_deceased\n        }\n        widgets(order_by: { index: asc }) {\n          id\n          type\n          index\n          config\n        }\n      }\n    }\n  }\n": types.GetInvitationByShareKeyDocument,
    "\n  query GetInvitationVisitCount($invitationId: uuid!) {\n    invitation_visit_log_aggregate(\n      where: { invitation_id: { _eq: $invitationId } }\n    ) {\n      aggregate {\n        count\n      }\n    }\n  }\n": types.GetInvitationVisitCountDocument,
    "\n  query GetAllRsvpAnswers($invitationId: uuid!) {\n    invitation_rsvp_answer(\n      where: { invitation_id: { _eq: $invitationId } }\n      order_by: { created_at: desc }\n    ) {\n      id\n      invitation_id\n      user_tracking_id\n      accepted\n      form_values\n      created_at\n      updated_at\n    }\n  }\n": types.GetAllRsvpAnswersDocument,
    "\n  query GetMyRsvpAnswer($invitationId: uuid!, $userTrackingId: String!) {\n    invitation_rsvp_answer(\n      where: {\n        invitation_id: { _eq: $invitationId }\n        user_tracking_id: { _eq: $userTrackingId }\n      }\n    ) {\n      id\n      invitation_id\n      user_tracking_id\n      accepted\n      form_values\n      created_at\n      updated_at\n    }\n  }\n": types.GetMyRsvpAnswerDocument,
    "\n  query GetRsvpAnswerCount($invitationId: uuid!) {\n    invitation_rsvp_answer_aggregate(\n      where: { invitation_id: { _eq: $invitationId } }\n    ) {\n      aggregate {\n        count\n      }\n    }\n  }\n": types.GetRsvpAnswerCountDocument,
    "\n  query GetInvitationComments($invitationId: uuid!, $limit: Int, $offset: Int) {\n    invitation_comment(\n      where: {\n        invitation_id: { _eq: $invitationId }\n        removed_at: { _is_null: true }\n        parent_id: { _is_null: true }\n      }\n      order_by: { created_at: desc }\n      limit: $limit\n      offset: $offset\n    ) {\n      id\n      invitation_id\n      parent_id\n      author\n      author_profile_image\n      body\n      created_at\n      updated_at\n      replies: invitation_comments(\n        where: { removed_at: { _is_null: true } }\n      ) {\n        id\n        parent_id\n        author\n        author_profile_image\n        body\n        created_at\n        updated_at\n      }\n    }\n  }\n": types.GetInvitationCommentsDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SaveRefreshToken($object: user_tokens_insert_input!) {\n    insert_user_tokens_one(object: $object) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation SaveRefreshToken($object: user_tokens_insert_input!) {\n    insert_user_tokens_one(object: $object) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateTokenLastUsedById($tokenId: uuid!) {\n    update_user_tokens_by_pk(\n      pk_columns: { id: $tokenId }\n      _set: { last_used_at: \"now()\", updated_at: \"now()\" }\n    ) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateTokenLastUsedById($tokenId: uuid!) {\n    update_user_tokens_by_pk(\n      pk_columns: { id: $tokenId }\n      _set: { last_used_at: \"now()\", updated_at: \"now()\" }\n    ) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RevokeRefreshToken($tokenId: uuid!) {\n    update_user_tokens_by_pk(\n      pk_columns: { id: $tokenId }\n      _set: { expired_at: \"now()\" }\n    ) {\n      id\n      expired_at\n    }\n  }\n"): (typeof documents)["\n  mutation RevokeRefreshToken($tokenId: uuid!) {\n    update_user_tokens_by_pk(\n      pk_columns: { id: $tokenId }\n      _set: { expired_at: \"now()\" }\n    ) {\n      id\n      expired_at\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RevokeRefreshTokenAll($userId: uuid!) {\n    update_user_tokens(\n      where: { user_id: { _eq: $userId } }\n      _set: { expired_at: \"now()\" }\n    ) {\n      affected_rows\n    }\n  }\n"): (typeof documents)["\n  mutation RevokeRefreshTokenAll($userId: uuid!) {\n    update_user_tokens(\n      where: { user_id: { _eq: $userId } }\n      _set: { expired_at: \"now()\" }\n    ) {\n      affected_rows\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteAllUserTokens($userId: uuid!) {\n    delete_user_tokens(where: { user_id: { _eq: $userId } }) {\n      affected_rows\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteAllUserTokens($userId: uuid!) {\n    delete_user_tokens(where: { user_id: { _eq: $userId } }) {\n      affected_rows\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RegisterUser(\n    $id: uuid!\n    $email: String\n    $name: String\n    $profile_image: String\n    $provider: String\n    $provider_id: String\n    $accept_marketing: Boolean\n  ) {\n    insert_user_one(\n      object: {\n        id: $id\n        email: $email\n        name: $name\n        profile_image: $profile_image\n        provider: $provider\n        provider_id: $provider_id\n        accept_marketing: $accept_marketing\n      }\n    ) {\n      id\n      email\n      name\n      profile_image\n      is_admin\n      created_at\n    }\n  }\n"): (typeof documents)["\n  mutation RegisterUser(\n    $id: uuid!\n    $email: String\n    $name: String\n    $profile_image: String\n    $provider: String\n    $provider_id: String\n    $accept_marketing: Boolean\n  ) {\n    insert_user_one(\n      object: {\n        id: $id\n        email: $email\n        name: $name\n        profile_image: $profile_image\n        provider: $provider\n        provider_id: $provider_id\n        accept_marketing: $accept_marketing\n      }\n    ) {\n      id\n      email\n      name\n      profile_image\n      is_admin\n      created_at\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateUserByProvider(\n    $provider: String!\n    $provider_id: String!\n    $email: String\n    $name: String\n    $profile_image: String\n  ) {\n    update_user(\n      where: { provider: { _eq: $provider }, provider_id: { _eq: $provider_id } }\n      _set: { email: $email, name: $name, profile_image: $profile_image, updated_at: \"now()\" }\n    ) {\n      affected_rows\n      returning {\n        id\n        email\n        name\n        profile_image\n        is_admin\n        created_at\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateUserByProvider(\n    $provider: String!\n    $provider_id: String!\n    $email: String\n    $name: String\n    $profile_image: String\n  ) {\n    update_user(\n      where: { provider: { _eq: $provider }, provider_id: { _eq: $provider_id } }\n      _set: { email: $email, name: $name, profile_image: $profile_image, updated_at: \"now()\" }\n    ) {\n      affected_rows\n      returning {\n        id\n        email\n        name\n        profile_image\n        is_admin\n        created_at\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UploadInvitationImage(\n    $id: uuid!\n    $invitation_id: uuid!\n    $widget_id: uuid\n    $type: String!\n    $mime_type: String!\n    $bucket: String!\n    $key: String!\n    $width: Int\n    $height: Int\n    $user_id: uuid\n  ) {\n    insert_invitation_attachment_one(\n      object: {\n        id: $id\n        invitation_id: $invitation_id\n        widget_id: $widget_id\n        type: $type\n        mime_type: $mime_type\n        bucket: $bucket\n        key: $key\n        width: $width\n        height: $height\n        user_id: $user_id\n      }\n    ) {\n      id\n      invitation_id\n      widget_id\n      type\n      bucket\n      key\n      width\n      height\n      created_at\n    }\n  }\n"): (typeof documents)["\n  mutation UploadInvitationImage(\n    $id: uuid!\n    $invitation_id: uuid!\n    $widget_id: uuid\n    $type: String!\n    $mime_type: String!\n    $bucket: String!\n    $key: String!\n    $width: Int\n    $height: Int\n    $user_id: uuid\n  ) {\n    insert_invitation_attachment_one(\n      object: {\n        id: $id\n        invitation_id: $invitation_id\n        widget_id: $widget_id\n        type: $type\n        mime_type: $mime_type\n        bucket: $bucket\n        key: $key\n        width: $width\n        height: $height\n        user_id: $user_id\n      }\n    ) {\n      id\n      invitation_id\n      widget_id\n      type\n      bucket\n      key\n      width\n      height\n      created_at\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AdminCreateTemplate(\n    $id: uuid!\n    $invitation_id: uuid!\n    $order: Int!\n  ) {\n    insert_template_one(\n      object: { id: $id, invitation_id: $invitation_id, order: $order }\n    ) {\n      id\n      invitation_id\n      order\n      created_at\n    }\n  }\n"): (typeof documents)["\n  mutation AdminCreateTemplate(\n    $id: uuid!\n    $invitation_id: uuid!\n    $order: Int!\n  ) {\n    insert_template_one(\n      object: { id: $id, invitation_id: $invitation_id, order: $order }\n    ) {\n      id\n      invitation_id\n      order\n      created_at\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AdminUpdateUserRole($userId: uuid!, $isAdmin: Boolean!) {\n    update_user_by_pk(pk_columns: { id: $userId }, _set: { is_admin: $isAdmin }) {\n      id\n      email\n      name\n      is_admin\n      updated_at\n    }\n  }\n"): (typeof documents)["\n  mutation AdminUpdateUserRole($userId: uuid!, $isAdmin: Boolean!) {\n    update_user_by_pk(pk_columns: { id: $userId }, _set: { is_admin: $isAdmin }) {\n      id\n      email\n      name\n      is_admin\n      updated_at\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AdminUpdateTemplateStage($id: uuid!, $order: Int!) {\n    update_template_by_pk(pk_columns: { id: $id }, _set: { order: $order }) {\n      id\n      order\n      updated_at\n    }\n  }\n"): (typeof documents)["\n  mutation AdminUpdateTemplateStage($id: uuid!, $order: Int!) {\n    update_template_by_pk(pk_columns: { id: $id }, _set: { order: $order }) {\n      id\n      order\n      updated_at\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AdminUpdateTemplateTitle($invitationId: uuid!, $metaTitle: String!) {\n    update_invitation_by_pk(\n      pk_columns: { id: $invitationId }\n    ) {\n      id\n      updated_at\n    }\n  }\n"): (typeof documents)["\n  mutation AdminUpdateTemplateTitle($invitationId: uuid!, $metaTitle: String!) {\n    update_invitation_by_pk(\n      pk_columns: { id: $invitationId }\n    ) {\n      id\n      updated_at\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AdminDeleteTemplate($id: uuid!) {\n    delete_template_by_pk(id: $id) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation AdminDeleteTemplate($id: uuid!) {\n    delete_template_by_pk(id: $id) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AdminUpdateTemplateOrders($updates: [template_insert_input!]!) {\n    insert_template(\n      objects: $updates\n      on_conflict: { constraint: template_pkey, update_columns: [order] }\n    ) {\n      affected_rows\n    }\n  }\n"): (typeof documents)["\n  mutation AdminUpdateTemplateOrders($updates: [template_insert_input!]!) {\n    insert_template(\n      objects: $updates\n      on_conflict: { constraint: template_pkey, update_columns: [order] }\n    ) {\n      affected_rows\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateWidgetConfig($id: uuid!, $config: jsonb!) {\n    update_widget_by_pk(pk_columns: { id: $id }, _set: { config: $config }) {\n      id\n      config\n      updated_at\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateWidgetConfig($id: uuid!, $config: jsonb!) {\n    update_widget_by_pk(pk_columns: { id: $id }, _set: { config: $config }) {\n      id\n      config\n      updated_at\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateWidgetIndex($id: uuid!, $index: Int!) {\n    update_widget_by_pk(pk_columns: { id: $id }, _set: { index: $index }) {\n      id\n      index\n      updated_at\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateWidgetIndex($id: uuid!, $index: Int!) {\n    update_widget_by_pk(pk_columns: { id: $id }, _set: { index: $index }) {\n      id\n      index\n      updated_at\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteWidget($id: uuid!) {\n    delete_widget_by_pk(id: $id) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteWidget($id: uuid!) {\n    delete_widget_by_pk(id: $id) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AddWidget(\n    $id: uuid!\n    $invitation_id: uuid!\n    $type: String!\n    $index: Int!\n    $config: jsonb\n  ) {\n    insert_widget_one(\n      object: {\n        id: $id\n        invitation_id: $invitation_id\n        type: $type\n        index: $index\n        config: $config\n      }\n    ) {\n      id\n      invitation_id\n      type\n      index\n      config\n      created_at\n    }\n  }\n"): (typeof documents)["\n  mutation AddWidget(\n    $id: uuid!\n    $invitation_id: uuid!\n    $type: String!\n    $index: Int!\n    $config: jsonb\n  ) {\n    insert_widget_one(\n      object: {\n        id: $id\n        invitation_id: $invitation_id\n        type: $type\n        index: $index\n        config: $config\n      }\n    ) {\n      id\n      invitation_id\n      type\n      index\n      config\n      created_at\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SubmitRsvpAnswer(\n    $id: uuid!\n    $invitation_id: uuid!\n    $user_tracking_id: String!\n    $accepted: Boolean!\n    $form_values: jsonb\n  ) {\n    insert_invitation_rsvp_answer_one(\n      object: {\n        id: $id\n        invitation_id: $invitation_id\n        user_tracking_id: $user_tracking_id\n        accepted: $accepted\n        form_values: $form_values\n      }\n      on_conflict: {\n        constraint: invitation_rsvp_answer_invitation_user_idx\n        update_columns: [accepted, form_values, updated_at]\n      }\n    ) {\n      id\n      invitation_id\n      user_tracking_id\n      accepted\n      form_values\n      created_at\n      updated_at\n    }\n  }\n"): (typeof documents)["\n  mutation SubmitRsvpAnswer(\n    $id: uuid!\n    $invitation_id: uuid!\n    $user_tracking_id: String!\n    $accepted: Boolean!\n    $form_values: jsonb\n  ) {\n    insert_invitation_rsvp_answer_one(\n      object: {\n        id: $id\n        invitation_id: $invitation_id\n        user_tracking_id: $user_tracking_id\n        accepted: $accepted\n        form_values: $form_values\n      }\n      on_conflict: {\n        constraint: invitation_rsvp_answer_invitation_user_idx\n        update_columns: [accepted, form_values, updated_at]\n      }\n    ) {\n      id\n      invitation_id\n      user_tracking_id\n      accepted\n      form_values\n      created_at\n      updated_at\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateComment(\n    $id: uuid!\n    $invitation_id: uuid!\n    $parent_id: uuid\n    $author: String!\n    $author_profile_image: String\n    $body: String!\n    $password: String\n  ) {\n    insert_invitation_comment_one(\n      object: {\n        id: $id\n        invitation_id: $invitation_id\n        parent_id: $parent_id\n        author: $author\n        author_profile_image: $author_profile_image\n        body: $body\n        password: $password\n      }\n    ) {\n      id\n      invitation_id\n      parent_id\n      author\n      author_profile_image\n      body\n      created_at\n    }\n  }\n"): (typeof documents)["\n  mutation CreateComment(\n    $id: uuid!\n    $invitation_id: uuid!\n    $parent_id: uuid\n    $author: String!\n    $author_profile_image: String\n    $body: String!\n    $password: String\n  ) {\n    insert_invitation_comment_one(\n      object: {\n        id: $id\n        invitation_id: $invitation_id\n        parent_id: $parent_id\n        author: $author\n        author_profile_image: $author_profile_image\n        body: $body\n        password: $password\n      }\n    ) {\n      id\n      invitation_id\n      parent_id\n      author\n      author_profile_image\n      body\n      created_at\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateComment($id: uuid!, $body: String!, $password: String!) {\n    update_invitation_comment_by_pk(\n      pk_columns: { id: $id }\n      _set: { body: $body, updated_at: \"now()\" }\n    ) {\n      id\n      body\n      updated_at\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateComment($id: uuid!, $body: String!, $password: String!) {\n    update_invitation_comment_by_pk(\n      pk_columns: { id: $id }\n      _set: { body: $body, updated_at: \"now()\" }\n    ) {\n      id\n      body\n      updated_at\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteComment($id: uuid!, $password: String!) {\n    update_invitation_comment_by_pk(\n      pk_columns: { id: $id }\n      _set: { removed_at: \"now()\" }\n    ) {\n      id\n      removed_at\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteComment($id: uuid!, $password: String!) {\n    update_invitation_comment_by_pk(\n      pk_columns: { id: $id }\n      _set: { removed_at: \"now()\" }\n    ) {\n      id\n      removed_at\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateInvitation(\n    $id: uuid!\n    $user_id: uuid!\n    $share_key: String!\n    $layout_type: String\n    $brand_color: String\n    $font: String\n  ) {\n    insert_invitation_one(\n      object: {\n        id: $id\n        layout_type: $layout_type\n        brand_color: $brand_color\n        font: $font\n        invitation_editors: { data: { id: $user_id, user_id: $user_id, is_creator: true } }\n        invitation_shares: {\n          data: { id: $user_id, share_key: $share_key, activation_method: \"public\" }\n        }\n      }\n    ) {\n      id\n      layout_type\n      brand_color\n      font\n      created_at\n    }\n  }\n"): (typeof documents)["\n  mutation CreateInvitation(\n    $id: uuid!\n    $user_id: uuid!\n    $share_key: String!\n    $layout_type: String\n    $brand_color: String\n    $font: String\n  ) {\n    insert_invitation_one(\n      object: {\n        id: $id\n        layout_type: $layout_type\n        brand_color: $brand_color\n        font: $font\n        invitation_editors: { data: { id: $user_id, user_id: $user_id, is_creator: true } }\n        invitation_shares: {\n          data: { id: $user_id, share_key: $share_key, activation_method: \"public\" }\n        }\n      }\n    ) {\n      id\n      layout_type\n      brand_color\n      font\n      created_at\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateInvitationEventInfo(\n    $id: uuid!\n    $event_at: timestamptz\n    $full_day_schedule: Boolean\n    $address: String\n    $road_address: String\n    $place_name: String\n    $place_detail: String\n    $coord: String\n  ) {\n    update_invitation_by_pk(\n      pk_columns: { id: $id }\n      _set: {\n        event_at: $event_at\n        full_day_schedule: $full_day_schedule\n        address: $address\n        road_address: $road_address\n        place_name: $place_name\n        place_detail: $place_detail\n        coord: $coord\n      }\n    ) {\n      id\n      event_at\n      full_day_schedule\n      address\n      road_address\n      place_name\n      place_detail\n      coord\n      updated_at\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateInvitationEventInfo(\n    $id: uuid!\n    $event_at: timestamptz\n    $full_day_schedule: Boolean\n    $address: String\n    $road_address: String\n    $place_name: String\n    $place_detail: String\n    $coord: String\n  ) {\n    update_invitation_by_pk(\n      pk_columns: { id: $id }\n      _set: {\n        event_at: $event_at\n        full_day_schedule: $full_day_schedule\n        address: $address\n        road_address: $road_address\n        place_name: $place_name\n        place_detail: $place_detail\n        coord: $coord\n      }\n    ) {\n      id\n      event_at\n      full_day_schedule\n      address\n      road_address\n      place_name\n      place_detail\n      coord\n      updated_at\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateInvitationOwners(\n    $invitation_id: uuid!\n    $owners: [invitation_owner_insert_input!]!\n  ) {\n    delete_invitation_owner(where: { invitation_id: { _eq: $invitation_id } }) {\n      affected_rows\n    }\n    insert_invitation_owner(objects: $owners) {\n      returning {\n        id\n        invitation_id\n        name\n        role\n        level\n        index\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateInvitationOwners(\n    $invitation_id: uuid!\n    $owners: [invitation_owner_insert_input!]!\n  ) {\n    delete_invitation_owner(where: { invitation_id: { _eq: $invitation_id } }) {\n      affected_rows\n    }\n    insert_invitation_owner(objects: $owners) {\n      returning {\n        id\n        invitation_id\n        name\n        role\n        level\n        index\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateInvitationMeta(\n    $id: uuid!\n  ) {\n    update_invitation_by_pk(\n      pk_columns: { id: $id }\n      _set: {\n      }\n    ) {\n      id\n      updated_at\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateInvitationMeta(\n    $id: uuid!\n  ) {\n    update_invitation_by_pk(\n      pk_columns: { id: $id }\n      _set: {\n      }\n    ) {\n      id\n      updated_at\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateInvitationDesign(\n    $id: uuid!\n    $layout_type: String\n    $brand_color: String\n    $font: String\n  ) {\n    update_invitation_by_pk(\n      pk_columns: { id: $id }\n      _set: { layout_type: $layout_type, brand_color: $brand_color, font: $font }\n    ) {\n      id\n      layout_type\n      brand_color\n      font\n      updated_at\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateInvitationDesign(\n    $id: uuid!\n    $layout_type: String\n    $brand_color: String\n    $font: String\n  ) {\n    update_invitation_by_pk(\n      pk_columns: { id: $id }\n      _set: { layout_type: $layout_type, brand_color: $brand_color, font: $font }\n    ) {\n      id\n      layout_type\n      brand_color\n      font\n      updated_at\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteInvitation($id: uuid!) {\n    update_invitation_by_pk(pk_columns: { id: $id }, _set: { removed_at: \"now()\" }) {\n      id\n      removed_at\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteInvitation($id: uuid!) {\n    update_invitation_by_pk(pk_columns: { id: $id }, _set: { removed_at: \"now()\" }) {\n      id\n      removed_at\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SetInvitationVisibility($invitation_id: uuid!, $visible: Boolean!) {\n    update_invitation_share(\n      where: { invitation_id: { _eq: $invitation_id } }\n      _set: { visible: $visible }\n    ) {\n      affected_rows\n    }\n  }\n"): (typeof documents)["\n  mutation SetInvitationVisibility($invitation_id: uuid!, $visible: Boolean!) {\n    update_invitation_share(\n      where: { invitation_id: { _eq: $invitation_id } }\n      _set: { visible: $visible }\n    ) {\n      affected_rows\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation LogInvitationVisit(\n    $invitation_id: uuid!\n    $user_tracking_id: String!\n  ) {\n    insert_invitation_visit_log_one(\n      object: {\n        invitation_id: $invitation_id\n        user_tracking_id: $user_tracking_id\n      }\n    ) {\n      invitation_id\n      visit_at\n    }\n  }\n"): (typeof documents)["\n  mutation LogInvitationVisit(\n    $invitation_id: uuid!\n    $user_tracking_id: String!\n  ) {\n    insert_invitation_visit_log_one(\n      object: {\n        invitation_id: $invitation_id\n        user_tracking_id: $user_tracking_id\n      }\n    ) {\n      invitation_id\n      visit_at\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ConfirmOrder(\n    $order_id: uuid!\n    $status: String!\n    $payment_key: String!\n  ) {\n    update_order_by_pk(\n      pk_columns: { id: $order_id }\n      _set: { status: $status, payment_key: $payment_key }\n    ) {\n      id\n      status\n      payment_key\n      updated_at\n    }\n  }\n"): (typeof documents)["\n  mutation ConfirmOrder(\n    $order_id: uuid!\n    $status: String!\n    $payment_key: String!\n  ) {\n    update_order_by_pk(\n      pk_columns: { id: $order_id }\n      _set: { status: $status, payment_key: $payment_key }\n    ) {\n      id\n      status\n      payment_key\n      updated_at\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ConfirmFreeOrder($order_id: uuid!, $status: String!) {\n    update_order_by_pk(pk_columns: { id: $order_id }, _set: { status: $status }) {\n      id\n      status\n      updated_at\n    }\n  }\n"): (typeof documents)["\n  mutation ConfirmFreeOrder($order_id: uuid!, $status: String!) {\n    update_order_by_pk(pk_columns: { id: $order_id }, _set: { status: $status }) {\n      id\n      status\n      updated_at\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetRefreshTokenByPk($id: uuid!) {\n    user_tokens_by_pk(id: $id) {\n      id\n      refresh_token\n      user_id\n      provider\n      expired_at\n      user {\n        id\n        email\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetRefreshTokenByPk($id: uuid!) {\n    user_tokens_by_pk(id: $id) {\n      id\n      refresh_token\n      user_id\n      provider\n      expired_at\n      user {\n        id\n        email\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetUserByEmail($email: String!) {\n    user(where: { email: { _eq: $email } }) {\n      id\n      email\n      name\n    }\n  }\n"): (typeof documents)["\n  query GetUserByEmail($email: String!) {\n    user(where: { email: { _eq: $email } }) {\n      id\n      email\n      name\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetMyInfo {\n    user {\n      id\n      email\n      name\n      profile_image\n      provider\n      provider_id\n      accept_marketing\n      is_admin\n      created_at\n      updated_at\n    }\n  }\n"): (typeof documents)["\n  query GetMyInfo {\n    user {\n      id\n      email\n      name\n      profile_image\n      provider\n      provider_id\n      accept_marketing\n      is_admin\n      created_at\n      updated_at\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetAllTemplates($limit: Int, $offset: Int) {\n    template(limit: $limit, offset: $offset, order_by: { order: asc }) {\n      id\n      invitation_id\n      order\n      created_at\n      updated_at\n      invitation {\n        id\n        layout_type\n        brand_color\n        font\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetAllTemplates($limit: Int, $offset: Int) {\n    template(limit: $limit, offset: $offset, order_by: { order: asc }) {\n      id\n      invitation_id\n      order\n      created_at\n      updated_at\n      invitation {\n        id\n        layout_type\n        brand_color\n        font\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetImageInfo($id: uuid!) {\n    invitation_attachment_by_pk(id: $id) {\n      id\n      invitation_id\n      widget_id\n      type\n      mime_type\n      bucket\n      key\n      width\n      height\n      user_id\n      created_at\n    }\n  }\n"): (typeof documents)["\n  query GetImageInfo($id: uuid!) {\n    invitation_attachment_by_pk(id: $id) {\n      id\n      invitation_id\n      widget_id\n      type\n      mime_type\n      bucket\n      key\n      width\n      height\n      user_id\n      created_at\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AdminGetTemplates($limit: Int, $offset: Int) {\n    template(limit: $limit, offset: $offset, order_by: { order: asc }) {\n      id\n      invitation_id\n      order\n      created_at\n      updated_at\n      invitation {\n        id\n        layout_type\n        brand_color\n        font\n        event_at\n        place_name\n      }\n    }\n  }\n"): (typeof documents)["\n  query AdminGetTemplates($limit: Int, $offset: Int) {\n    template(limit: $limit, offset: $offset, order_by: { order: asc }) {\n      id\n      invitation_id\n      order\n      created_at\n      updated_at\n      invitation {\n        id\n        layout_type\n        brand_color\n        font\n        event_at\n        place_name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AdminGetAllInvitations($limit: Int, $offset: Int) {\n    invitation(\n      limit: $limit\n      offset: $offset\n      order_by: { created_at: desc }\n      where: { removed_at: { _is_null: true } }\n    ) {\n      id\n      event_at\n      full_day_schedule\n      address\n      road_address\n      place_name\n      place_detail\n      coord\n      layout_type\n      brand_color\n      font\n      created_at\n      updated_at\n      invitation_owners {\n        name\n        role\n      }\n      invitation_editors {\n        user {\n          name\n          email\n        }\n        is_creator\n      }\n    }\n  }\n"): (typeof documents)["\n  query AdminGetAllInvitations($limit: Int, $offset: Int) {\n    invitation(\n      limit: $limit\n      offset: $offset\n      order_by: { created_at: desc }\n      where: { removed_at: { _is_null: true } }\n    ) {\n      id\n      event_at\n      full_day_schedule\n      address\n      road_address\n      place_name\n      place_detail\n      coord\n      layout_type\n      brand_color\n      font\n      created_at\n      updated_at\n      invitation_owners {\n        name\n        role\n      }\n      invitation_editors {\n        user {\n          name\n          email\n        }\n        is_creator\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AdminGetInvitation($id: uuid!) {\n    invitation_by_pk(id: $id) {\n      id\n      event_at\n      full_day_schedule\n      address\n      road_address\n      place_name\n      place_detail\n      coord\n      layout_type\n      brand_color\n      font\n      created_at\n      updated_at\n      invitation_owners {\n        id\n        name\n        role\n        level\n        index\n        given_name\n        family_name\n        family_name_first\n      }\n      invitation_editors {\n        id\n        user_id\n        is_creator\n        last_edit_at\n        user {\n          name\n          email\n        }\n      }\n      widgets {\n        id\n        type\n        index\n        config\n      }\n    }\n  }\n"): (typeof documents)["\n  query AdminGetInvitation($id: uuid!) {\n    invitation_by_pk(id: $id) {\n      id\n      event_at\n      full_day_schedule\n      address\n      road_address\n      place_name\n      place_detail\n      coord\n      layout_type\n      brand_color\n      font\n      created_at\n      updated_at\n      invitation_owners {\n        id\n        name\n        role\n        level\n        index\n        given_name\n        family_name\n        family_name_first\n      }\n      invitation_editors {\n        id\n        user_id\n        is_creator\n        last_edit_at\n        user {\n          name\n          email\n        }\n      }\n      widgets {\n        id\n        type\n        index\n        config\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AdminSearchUsers($search: String!, $limit: Int) {\n    user(\n      where: {\n        _or: [\n          { email: { _ilike: $search } }\n          { name: { _ilike: $search } }\n        ]\n        removed_at: { _is_null: true }\n      }\n      limit: $limit\n    ) {\n      id\n      email\n      name\n      profile_image\n      is_admin\n      created_at\n    }\n  }\n"): (typeof documents)["\n  query AdminSearchUsers($search: String!, $limit: Int) {\n    user(\n      where: {\n        _or: [\n          { email: { _ilike: $search } }\n          { name: { _ilike: $search } }\n        ]\n        removed_at: { _is_null: true }\n      }\n      limit: $limit\n    ) {\n      id\n      email\n      name\n      profile_image\n      is_admin\n      created_at\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AdminGetMe {\n    user(where: { is_admin: { _eq: true } }, limit: 1) {\n      id\n      email\n      name\n      profile_image\n      is_admin\n      created_at\n    }\n  }\n"): (typeof documents)["\n  query AdminGetMe {\n    user(where: { is_admin: { _eq: true } }, limit: 1) {\n      id\n      email\n      name\n      profile_image\n      is_admin\n      created_at\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AdminGetStatistics {\n    invitation_aggregate {\n      aggregate {\n        count\n      }\n    }\n    user_aggregate(where: { removed_at: { _is_null: true } }) {\n      aggregate {\n        count\n      }\n    }\n    order_aggregate(where: { status: { _eq: \"COMPLETED\" } }) {\n      aggregate {\n        count\n      }\n    }\n    invitation_visit_log_aggregate {\n      aggregate {\n        count\n      }\n    }\n  }\n"): (typeof documents)["\n  query AdminGetStatistics {\n    invitation_aggregate {\n      aggregate {\n        count\n      }\n    }\n    user_aggregate(where: { removed_at: { _is_null: true } }) {\n      aggregate {\n        count\n      }\n    }\n    order_aggregate(where: { status: { _eq: \"COMPLETED\" } }) {\n      aggregate {\n        count\n      }\n    }\n    invitation_visit_log_aggregate {\n      aggregate {\n        count\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetInvitation($id: uuid!) {\n    invitation_by_pk(id: $id) {\n      id\n      event_at\n      full_day_schedule\n      address\n      road_address\n      place_name\n      place_detail\n      coord\n      layout_type\n      brand_color\n      font\n      created_at\n      updated_at\n      invitation_owners(order_by: { index: asc }) {\n        id\n        name\n        role\n        level\n        index\n        given_name\n        family_name\n        family_name_first\n        father_given_name\n        father_family_name\n        father_family_name_first\n        father_is_hidden\n        father_is_deceased\n        mother_given_name\n        mother_family_name\n        mother_family_name_first\n        mother_is_hidden\n        mother_is_deceased\n      }\n      widgets(order_by: { index: asc }) {\n        id\n        type\n        index\n        config\n        created_at\n        updated_at\n      }\n      invitation_shares(where: { visible: { _eq: true } }) {\n        id\n        share_key\n        activation_method\n        expired_at\n        visible\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetInvitation($id: uuid!) {\n    invitation_by_pk(id: $id) {\n      id\n      event_at\n      full_day_schedule\n      address\n      road_address\n      place_name\n      place_detail\n      coord\n      layout_type\n      brand_color\n      font\n      created_at\n      updated_at\n      invitation_owners(order_by: { index: asc }) {\n        id\n        name\n        role\n        level\n        index\n        given_name\n        family_name\n        family_name_first\n        father_given_name\n        father_family_name\n        father_family_name_first\n        father_is_hidden\n        father_is_deceased\n        mother_given_name\n        mother_family_name\n        mother_family_name_first\n        mother_is_hidden\n        mother_is_deceased\n      }\n      widgets(order_by: { index: asc }) {\n        id\n        type\n        index\n        config\n        created_at\n        updated_at\n      }\n      invitation_shares(where: { visible: { _eq: true } }) {\n        id\n        share_key\n        activation_method\n        expired_at\n        visible\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetMyInvitations($userId: uuid!) {\n    invitation_editor(\n      where: { user_id: { _eq: $userId } }\n      order_by: { created_at: desc }\n    ) {\n      invitation {\n        id\n        event_at\n        place_name\n        layout_type\n        brand_color\n        created_at\n        updated_at\n        invitation_owners(limit: 2) {\n          name\n          role\n        }\n        invitation_shares(where: { visible: { _eq: true } }, limit: 1) {\n          share_key\n        }\n      }\n      is_creator\n      last_edit_at\n    }\n  }\n"): (typeof documents)["\n  query GetMyInvitations($userId: uuid!) {\n    invitation_editor(\n      where: { user_id: { _eq: $userId } }\n      order_by: { created_at: desc }\n    ) {\n      invitation {\n        id\n        event_at\n        place_name\n        layout_type\n        brand_color\n        created_at\n        updated_at\n        invitation_owners(limit: 2) {\n          name\n          role\n        }\n        invitation_shares(where: { visible: { _eq: true } }, limit: 1) {\n          share_key\n        }\n      }\n      is_creator\n      last_edit_at\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetInvitationOrder($invitationId: uuid!) {\n    order(\n      where: { invitation_id: { _eq: $invitationId } }\n      order_by: { created_at: desc }\n      limit: 1\n    ) {\n      id\n      invitation_id\n      status\n      plan\n      payment_key\n      created_at\n      updated_at\n    }\n  }\n"): (typeof documents)["\n  query GetInvitationOrder($invitationId: uuid!) {\n    order(\n      where: { invitation_id: { _eq: $invitationId } }\n      order_by: { created_at: desc }\n      limit: 1\n    ) {\n      id\n      invitation_id\n      status\n      plan\n      payment_key\n      created_at\n      updated_at\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetInvitationByShareKey($shareKey: String!) {\n    invitation_share(where: { share_key: { _eq: $shareKey } }) {\n      id\n      share_key\n      visible\n      expired_at\n      invitation {\n        id\n        event_at\n        full_day_schedule\n        address\n        road_address\n        place_name\n        place_detail\n        coord\n        layout_type\n        brand_color\n        font\n        invitation_owners(order_by: { index: asc }) {\n          id\n          name\n          role\n          level\n          given_name\n          family_name\n          family_name_first\n          father_given_name\n          father_family_name\n          father_is_hidden\n          father_is_deceased\n          mother_given_name\n          mother_family_name\n          mother_is_hidden\n          mother_is_deceased\n        }\n        widgets(order_by: { index: asc }) {\n          id\n          type\n          index\n          config\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetInvitationByShareKey($shareKey: String!) {\n    invitation_share(where: { share_key: { _eq: $shareKey } }) {\n      id\n      share_key\n      visible\n      expired_at\n      invitation {\n        id\n        event_at\n        full_day_schedule\n        address\n        road_address\n        place_name\n        place_detail\n        coord\n        layout_type\n        brand_color\n        font\n        invitation_owners(order_by: { index: asc }) {\n          id\n          name\n          role\n          level\n          given_name\n          family_name\n          family_name_first\n          father_given_name\n          father_family_name\n          father_is_hidden\n          father_is_deceased\n          mother_given_name\n          mother_family_name\n          mother_is_hidden\n          mother_is_deceased\n        }\n        widgets(order_by: { index: asc }) {\n          id\n          type\n          index\n          config\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetInvitationVisitCount($invitationId: uuid!) {\n    invitation_visit_log_aggregate(\n      where: { invitation_id: { _eq: $invitationId } }\n    ) {\n      aggregate {\n        count\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetInvitationVisitCount($invitationId: uuid!) {\n    invitation_visit_log_aggregate(\n      where: { invitation_id: { _eq: $invitationId } }\n    ) {\n      aggregate {\n        count\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetAllRsvpAnswers($invitationId: uuid!) {\n    invitation_rsvp_answer(\n      where: { invitation_id: { _eq: $invitationId } }\n      order_by: { created_at: desc }\n    ) {\n      id\n      invitation_id\n      user_tracking_id\n      accepted\n      form_values\n      created_at\n      updated_at\n    }\n  }\n"): (typeof documents)["\n  query GetAllRsvpAnswers($invitationId: uuid!) {\n    invitation_rsvp_answer(\n      where: { invitation_id: { _eq: $invitationId } }\n      order_by: { created_at: desc }\n    ) {\n      id\n      invitation_id\n      user_tracking_id\n      accepted\n      form_values\n      created_at\n      updated_at\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetMyRsvpAnswer($invitationId: uuid!, $userTrackingId: String!) {\n    invitation_rsvp_answer(\n      where: {\n        invitation_id: { _eq: $invitationId }\n        user_tracking_id: { _eq: $userTrackingId }\n      }\n    ) {\n      id\n      invitation_id\n      user_tracking_id\n      accepted\n      form_values\n      created_at\n      updated_at\n    }\n  }\n"): (typeof documents)["\n  query GetMyRsvpAnswer($invitationId: uuid!, $userTrackingId: String!) {\n    invitation_rsvp_answer(\n      where: {\n        invitation_id: { _eq: $invitationId }\n        user_tracking_id: { _eq: $userTrackingId }\n      }\n    ) {\n      id\n      invitation_id\n      user_tracking_id\n      accepted\n      form_values\n      created_at\n      updated_at\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetRsvpAnswerCount($invitationId: uuid!) {\n    invitation_rsvp_answer_aggregate(\n      where: { invitation_id: { _eq: $invitationId } }\n    ) {\n      aggregate {\n        count\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetRsvpAnswerCount($invitationId: uuid!) {\n    invitation_rsvp_answer_aggregate(\n      where: { invitation_id: { _eq: $invitationId } }\n    ) {\n      aggregate {\n        count\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetInvitationComments($invitationId: uuid!, $limit: Int, $offset: Int) {\n    invitation_comment(\n      where: {\n        invitation_id: { _eq: $invitationId }\n        removed_at: { _is_null: true }\n        parent_id: { _is_null: true }\n      }\n      order_by: { created_at: desc }\n      limit: $limit\n      offset: $offset\n    ) {\n      id\n      invitation_id\n      parent_id\n      author\n      author_profile_image\n      body\n      created_at\n      updated_at\n      replies: invitation_comments(\n        where: { removed_at: { _is_null: true } }\n      ) {\n        id\n        parent_id\n        author\n        author_profile_image\n        body\n        created_at\n        updated_at\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetInvitationComments($invitationId: uuid!, $limit: Int, $offset: Int) {\n    invitation_comment(\n      where: {\n        invitation_id: { _eq: $invitationId }\n        removed_at: { _is_null: true }\n        parent_id: { _is_null: true }\n      }\n      order_by: { created_at: desc }\n      limit: $limit\n      offset: $offset\n    ) {\n      id\n      invitation_id\n      parent_id\n      author\n      author_profile_image\n      body\n      created_at\n      updated_at\n      replies: invitation_comments(\n        where: { removed_at: { _is_null: true } }\n      ) {\n        id\n        parent_id\n        author\n        author_profile_image\n        body\n        created_at\n        updated_at\n      }\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;